#! /usr/bin/env bash

create_vm_config()
{
   # check config
   check_vm_config > /dev/null

   if [[ $? -eq 0 ]]
   then
      r_quit 1 "The virtual machine [\"${vname}\"] config already exists.\nConsider updating its attributes instead."
   fi

   # get template
   declare stub_filepath="${command_data_pathname}/vm.stub"

   if [[ ! -f  $stub_filepath  ]]
   then
      r_quit 127 "Missing virtualbox config template."
   fi

   # copy template content into new config file
   cat $stub_filepath > $config_filepath


   #retrieve keys
   list_attrs :attrs

   # update neccessary value
   declare key= value=
   declare -a collection=()

   for key in ${!attrs[@]}
   do
      if [[ "$key" == "state" ]]
      then
         continue
      fi

      read -p "$key: " value

      collection+=($key $value)
   done

   set_attrs ${collection[@]}

   # persist changes
   save_vm_config
}

check_and_create_if_not_exists()
{
   # check vm config
   check_vm_config > /dev/null

   # prompt creating choice based on return code
   if [[ $? -ne 0 ]]
   then
      echo "Virtual machine [\"${vname}\"] config not found.\nWant to create one ? [Y/n]"

      # yes : create
      declare choice='y'
      read -p '> ' choice

      choice=${choice:-'y'}

      # no : quit
      if [[ ! "${choice}" =~ [yY] ]]
      then
         r_quit 1 "Aborting..."
      fi

      # create a new config file
      create_vm_config
   fi
}


check_vm_config()
{
   declare -xg config_filepath="${command_data_pathname}/conf.d/${vname}.conf"

   if [[ ! -f $config_filepath ]]
   then
      return 1
   fi
}

load_vm_config()
{

   # singleton pattern
   is_assoc_array 'parsed_config' && return 0

   # check if vm config exist
   ! check_vm_config && r_quit 127 "Failed to open config file at: \"${config_filepath}\""

   declare -xAg parsed_config=()

   # encapsulate following variable
   declare key= value= IFS='='
   while read key value
   do

      if [[ -n $key ]]
      then
         parsed_config[$key]="${value}"
      fi

   done < $config_filepath
}

get_attr() {

   declare rvalue=

   # load config
   load_vm_config

   # check if key exist
   ! $(key_exists_in $1 'parsed_config') && return 1

   rvalue=${parsed_config[$1]}

   # check if rvalue is not a placeholder or not empty

   if [[ "${rvalue}" == ":${1}" ]] || [[ -z "${rvalue}" ]]
   then

      resolve_attr $1 :resolved_attr

      [[ $? -ne 0 ]] && return 1

      set_attr $1 $resolved_attr

      # persist change
      save_vm_config

      rvalue="${resolved_attr}"
   fi

   # bind to variable name if provided [$2]
   bind_param rvalue $2 || echo $rvalue

   # prevent propagation of rvalue
   declare +g rvalue=
}


resolve_attr()
{
   declare response=

   echo "Attribute \"$1\" seems off. Wanna fix it ? [Y/N] "

   read -p '> ' response

   echo $response | grep -Ei '^y'

   [[ $? -ne 0 ]] && return 1

   echo "Value of \"${1}\" attribute:"

   read -p '> ' response

   bind_param 'response' $2

   return 0
}

set_attr()
{
   set_attrs $@
}

set_attrs()
{

   # check params
   if  [[ $# -lt 2 ]] || [[ $(( $# % 2)) -ne 0 ]]
   then
      r_quit 1 "Missing key or value ... Bother checking once again"
   fi

   # load config
   load_vm_config

   declare key= value= IFS=' '
   while read key value
   do

      key_exists_in $key 'parsed_config'

      if [[ $? -ne 0 ]]
      then
         r_quit 1 "Unexpected key: [\"${key}\"] given for update."
      fi

      parsed_config[$key]="${value}"

   done <<< "$(echo $@ | xargs -n 2)"

}


list_attrs()
{
   # load parsed config
   load_vm_config

   bind_param parsed_config $1

   # if bind fail then loop-print
   if [[ $? -ne 0 ]]
   then

      declare key=

      for key in ${!parsed_config[@]}
      do
         echo "${key}=${parsed_config[$key]}"
      done

   fi
}

save_vm_config()
{
   # load parsed config
   load_vm_config

   # empty file
   truncate -s 0 $config_filepath

   declare key=
   for key in ${!parsed_config[@]}
   do
      echo "${key}=${parsed_config[$key]}" >> $config_filepath
   done

}


declare -xf check_and_create_if_not_exists

declare -xf create_vm_config
declare -xf check_vm_config
declare -xf load_vm_config
declare -xf save_vm_config

declare -xf resolve_attr
declare -xf list_attrs
declare -xf set_attrs

declare -xf get_attr
declare -xf set_attr
