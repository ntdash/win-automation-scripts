#! /usr/bin/env bash


load_config()
{

	# $1 :pathname string
	[[ ! -f $1 ]] && echo "Failed to opened config file: \"$1\"." && return 1

	declare -xg parsed_config=`mktemp -t c_vbox.XXXXX`

	[[ ! -f $parsed_config ]] && echo "Failed to prepare parsed_config buffer" && exit 1

	# cleanup after process
	trap "rm -f ${parsed_config}" EXIT

	declare -A collection

	# define separator
	declare IFS='='

	# encapsulate following variable
	declare key value

	while read key value
	do

		[[ -n $key ]] && collection[$key]="${value}"

	done < $1


	declare -p collection > $parsed_configs

	# export config file if everything goes well or return what
	[[ $? -eq 0 ]] && declare -xg vm_config_file="${1}" && return 0 || return $?

}

get_property() {

	declare -g rvalue=

	# load parsed_config
	source $parsed_configs

	# throw error if collection not found
	[[ $( is_assoc_array collection ) ]] && echo "Failed to load parsed configs." && return 1

	# check if key exist
	if [[ " ${!collection[@]} " =~ $1 ]]
	then

		rvalue=${collection[$1]}

		if [[ "${2}" =~ (true|input) ]]
		then

			# return error_code=2 if value is expected but not found
			[[ -z $rvalue ]] && return 2

			[[ "${2}" == "input" ]] && echo $rvalue

		fi

		return 0
	fi

	return 1
}

set_property()
{
	# throw error if config file not defined
	[[ $( is_defined vm_config_file  ) ]] && echo "\"vm_config_file\" not defined." && return 1

	# load config
	source $parsed_configs

	# throw error if collection not found
	[[ $( is_assoc_array collection ) ]] && echo "Failed to load parsed configs." && return 1

	# throw error if $1 not defined
	[[ -z $1 ]] && echo "Expect key of type: \"string | int\" but \"undefined\" given." && return 1

	# throw error if $2 is empty
	[[ -z $1 ]] && echo "Empty value given" && return 1

	# check if key exists
	if [[ " ${!collection[@]} " =~ $1 ]]
	then

		collection[$key]="${2}"

	else
		echo "Failed to locate key: \"${1}\" in collection"
		return 1
	fi

	# save
	declare key
	declare tmp=`mktemp -t t.vm_config.XXXXXXX`;

	# check tmp_file
	[[ ! -f $tmp ]] && echo "Failed to prepare parsed_configs buffer" && exit 1

	# cleanup after process
	trap "rm -f ${tmp}" EXIT

	for key in ${!collection[@]}
	do
		echo "${key}=${collection[$key]}" > $tmp
	done

	[[ $? -ne 0 ]] && echo "Error occured while saving mutated config collection" && return 1

	# make mutation permanent
	cat $tmp > $vm_config_file

	[[ $? -ne 0 ]] && echo "Error occured while saving mutated config collection" && return 1
}


list_config()
{
	# load parsed_config
	source $parsed_configs

	# throw error if collection not found
	[[ $( is_assoc_array collection ) ]] && echo "Failed to load parsed configs." && return 1

	# go through collection
	for key in ${!collection[@]}
	do
		echo "${key}=${collection[$key]}"
	done

}
