#! /usr/bin/env bash


load_config()
{

	# $1 :pathname string
	if [[ ! -f $1 ]]
	then
		echo "Failed to open config file at: \"$1\""
		exit 127
	fi

	declare -xg serialized_parsed_config=""

	declare -A collection=()

	# encapsulate following variable
	declare key= value= IFS='='

	while read key value
	do

		if [[ -n $key ]]
		then
			collection[$key]="${value}"
		fi

	done < $1

	# dump serialized config into exported variable
	serialized_parsed_config="$(declare -p collection | sed -r 's/^declare -[aA] collection=(.*)$/\1/')"

	# early return if previous execution failed or second argument has been given
	if [[ $? -ne 0 ]] || [[ -n "$2" ]]
	then
		return 1
	fi

	# export config filepath
	declare -xg vm_config_filepath="${1}"
}

get_attr() {

	declare -l rvalue=

	# load parsed_config
	declare -A collection="${serialized_parsed_config}"

	# throw error if collection not found
	# check if assoc

	# "Failed to load parsed configs."
	! $(is_assoc_array collection) && return 127

	# check if key exist
	if [[ ! " ${!collection[@]} " =~ $1 ]]
	then
		return 1
	fi

	rvalue=${collection[$1]}

	# bind to variable name if provided [$2]
	bind_param rvalue $2 || echo $rvalue
}

set_attr()
{
	set_attrs $@
}

set_attrs()
{
	# check params
	if  [[ $# -lt 2 ]] || [[ $(( $# % 2)) -ne 0 ]]
	then
		echo "Missing key or value ... Bother checking once again"
		exit 1
	fi

	# check loaded config
	! $(is_defined vm_config_filepath) \
		&& echo -e "Failed to retrieve config_file table.\nAn error must have occured while loading the config_file" \
			&& exit 127

	# loaded parsed config
	declare -A collection="${serialized_parsed_config}"

	declare IFS=' ' key= value=
	while read key value
	do

		if [[ " ${!collection[@]} " =~ $key ]]
		then
			collection[$key]="${value}"
		else
			echo "Unexpected key given for update: ${key}"
			exit 1
		fi

	done <<< "$(echo $@ | xargs -n 2)"


	# empty file
	truncate -s 0 $vm_config_filepath

	declare key=
	for key in ${!collection[@]}
	do
		echo "${key}=${collection[$key]}" >> $vm_config_filepath
	done

}


list_attrs()
{
	# load parsed_config
	declare -A collection="${serialized_parsed_config}"

	# throw error if collection not found
	! $(is_assoc_array collection) && return 127

	bind_param collection $1

	# if bind fail then loop-print
	if [[ $? -ne 0 ]]
	then

		declare key=

		for key in ${!collection[@]}
		do
			echo "${key}=${collection[$key]}"
		done

	fi
}

declare -xf load_config
declare -xf list_attrs
declare -xf get_attr
declare -xf set_attr
declare -xf set_attrs
