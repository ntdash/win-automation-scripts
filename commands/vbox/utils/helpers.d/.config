#! /usr/bin/env bash

create_vm_config()
{
	# check config
	check_vm_config > /dev/null

	if [[ $? -eq 0 ]]
	then
		echo -e "The virtual machine [\"${vname}\"] config already exists.\nConsider updating its attributes instead."
		exit 1
	fi

	# get template
	declare stub_filepath="${command_data_pathname}/vm.stub"

	if [[ ! -f  $stub_filepath  ]]
	then
		echo "Missing virtualbox config template."
		exit 127
	fi

	# copy template content into new config file
	cat $stub_filepath > $config_filepath


	#retrieve keys
	list_attrs :attrs

	# update neccessary value
	declare key= value=
	declare -a collection=()

	for key in ${!attrs[@]}
	do
		if [[ "$key" == "state" ]]
		then
			continue
		fi

		read -p "$key: " value

		collection+=($key $value)
	done

	set_attrs ${collection[@]}

	# persist changes
	save_vm_config
}

check_and_create_if_not_exists()
{
	# check vm config
	check_vm_config > /dev/null

	# prompt creating choice based on return code
	if [[ $? -ne 0 ]]
	then
		echo -e "Virtual machine [\"${vname}\"] config not found.\nWant to create one ? [Y/n]"

		# yes : create
		declare choice='y'
		read -p '> ' choice

		choice=${choice:-'y'}

		# no : quit
		if [[ ! "${choice}" =~ [yY] ]]
		then
			echo "Aborting..."
			exit 1
		fi

		# create a new config file
		create_vm_config
	fi
}


check_vm_config()
{
	declare -xg config_filepath="${command_data_pathname}/conf.d/${vname}.conf"

	if [[ ! -f $config_filepath ]]
	then
		echo "Failed to open config file at: \"${config_filepath}\""
		return 1
	fi
}

load_vm_config()
{

	# singleton pattern
	$(is_assoc_array parsed_config) && return 0

	# check if vm config exist
	! check_vm_config && exit 127

	declare -xAg parsed_config=()

	# encapsulate following variable
	declare key= value= IFS='='
	while read key value
	do

		if [[ -n $key ]]
		then
			parsed_config[$key]="${value}"
		fi

	done < $config_filepath
}

get_attr() {

	declare rvalue=

	# load config
	load_vm_config

	# check if key exist
	! $(key_exists_in $1 'parsed_config') && return 1

	rvalue=${parsed_config[$1]}

	# bind to variable name if provided [$2]
	bind_param rvalue $2 || echo $rvalue
}

set_attr()
{
	set_attrs $@
}

set_attrs()
{

	# check params
	if  [[ $# -lt 2 ]] || [[ $(( $# % 2)) -ne 0 ]]
	then
		echo "Missing key or value ... Bother checking once again"
		exit 1
	fi

	# load config
	load_vm_config

	declare key= value= IFS=' '
	while read key value
	do

		key_exists_in $key 'parsed_config'

		if [[ $? -ne 0 ]]
		then
			echo "Unexpected key: [\"${key}\"] given for update."
			exit 1
		fi

		parsed_config[$key]="${value}"

	done <<< "$(echo $@ | xargs -n 2)"

}


list_attrs()
{
	# load parsed config
	load_vm_config

	bind_param parsed_config $1

	# if bind fail then loop-print
	if [[ $? -ne 0 ]]
	then

		declare key=

		for key in ${!parsed_config[@]}
		do
			echo "${key}=${parsed_config[$key]}"
		done

	fi
}

save_vm_config()
{
	# load parsed config
	load_vm_config

	# empty file
	truncate -s 0 $config_filepath

	declare key=
	for key in ${!parsed_config[@]}
	do
		echo "${key}=${parsed_config[$key]}" >> $config_filepath
	done

}


declare -xf check_and_create_if_not_exists

declare -xf create_vm_config
declare -xf check_vm_config
declare -xf load_vm_config
declare -xf save_vm_config

declare -xf list_attrs
declare -xf set_attrs

declare -xf get_attr
declare -xf set_attr
