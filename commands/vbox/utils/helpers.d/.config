#! /usr/bin/env bash


load_config()
{

	# $1 :pathname string
	if [[ ! -f $1 ]]
	then
		echo "Failed to open config file at \"$1\""
		exit 127
	fi

	declare -xg parsed_config_file=`mktemp -t ${tprefix}.vbox.XXXXXXX`

	if [[ ! -f $parsed_config_file ]]
	then
		echo "Failed to prepare file for temporary data store"
		exit 127
	fi

	# cleanup after process
	trap "rm -f ${parsed_config_file}" EXIT

	declare -A collection=()

	# encapsulate following variable
	declare key= value= IFS='='

	while read key value
	do

		if [[ -n $key ]]
		then
			collection[$key]="${value}"
		fi

	done < $1

	# dump result into $parsed_config_file
	declare -p collection > $parsed_config_file

	# early return if previous execution failed or second argument has been given
	if [[ $? -ne 0 ]] || [[ -n "$2" ]]
	then
		return 1
	fi

	# export config filepath
	declare -xg vm_config_filepath="${1}"
}

get_attr() {

	declare -l rvalue=

	# load parsed_config_file
	source $parsed_config_file

	# throw error if collection not found
	# check if assoc

	# "Failed to load parsed configs."
	! $(is_assoc_array collection) && return 127

	# check if key exist
	if [[ ! " ${!collection[@]} " =~ $1 ]]
	then
		return 1
	fi

	rvalue=${collection[$1]}

	# bind to variable name if provided [$2]
	bind_param rvalue $2 || echo $rvalue
}

set_attr()
{
	# throw error if config file not defined
	! $(is_defined vm_config_filepath) \
		&& echo -e "Failed to retrieve config_file table.\nAn error must have been occured while loading the config_file" \
			&& exit 1

	# load config
	source $parsed_config_file

	# "Failed to load parsed configs."
	! $(is_assoc_array collection) && return 127

	# throw error if $1 not defined
	# error_message: Expect key of type: \"string | int\" but \"undefined\" given.
	if [[ -z $1 ]]
	then
		return 1
	fi

	# throw error if $2 is empty
	# error_message: "Empty value"
	if [[ -z $2 ]]
	then
		 return 1
	fi

	# check if key exists
	# error_message = echo "Failed to locate key: \"${1}\" in collection"

	if [[ " ${!collection[@]} " =~ $1 ]]
	then
		collection[$key]="${2}"
	else
		return 1
	fi

	# save
	declare tmp=`mktemp -t t.vm_config.XXXXXXX`;

	# check tmp_file

	if [[ ! -f $tmp ]]
	then
		echo "Failed to prepare file for temporary data store"
		exit 1
	fi


	# cleanup after process
	trap "rm -f ${tmp}" EXIT

	for key in ${!collection[@]}
	do
		echo "${key}=${collection[$key]}" > $tmp
	done

	# echo "Error occured while saving mutated config collection"
	if [[ $? -ne 0 ]]
	then
		return 1
	fi

	# make mutation permanent
	cat $tmp > $vm_config_filepath

	# echo "Error occured while saving mutated config collection"
	if [[ $? -ne 0 ]]
	then
		return 1
	fi
}


list_attrs()
{
	# load parsed_config_file
	source $parsed_config_file

	# throw error if collection not found
	! $(is_assoc_array collection) && return 127

	bind_param collection $1

	# if bind fail then loop-print
	if [[ $? -ne 0 ]]
	then

		declare key=

		for key in ${!collection[@]}
		do
			echo "${key}=${collection[$key]}"
		done

	fi
}

declare -xf load_config
declare -xf list_attrs
declare -xf get_attr
declare -xf set_attr
