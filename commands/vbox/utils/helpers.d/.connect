retrieve_conn_params()
{
   [[ -n $vm_host ]] && [[ -n $vm_user ]] && return 0

   # load config
   load_vm_config

   # possible variable
   declare -a pv_table=('user' 'host')
   declare table_updated='false' attr=

   for attr in ${pv_table[@]}
   do

      # apply prefix
      declare -g "vm_${attr}"="${parsed_config[$attr]}"
      declare -n ref="vm_${attr}"

      if [[ -z $ref ]] || [[ "${ref}" == ":${attr}" ]]
      then
         echo "Attribute [\"$attr\"] not defined. Will you want to define one ? [Y/n]"

         declare choice='y'
         read -p '> ' choice

         choice=${choice:-'y'}

         if [[ ! "${choice}" =~ [yY] ]]
         then
            r_quit 1 "Aborting..."
         fi

         ref=${choice}
         table_updated="true"
      fi
   done

   # persit any change
   if [[ "${table_updated}" == "true" ]]
   then
      save_vm_config
   fi

}

resolve_workdir()
{
   # resolve workdir
   option_key_exists w

   if [[ $? -eq 0 ]]
   then

      # try retrieving workdir value from parsed options array
      get_option_value w :workdir

      # try retrieving workdir value from previous one saved in config data file
      [[ -z "${workdir}" ]] && get_attr 'workdir' :workdir

      # try retrieving workdir value from user prompt
      if [[ -z "${workdir}" ]] || [[ "${workdir}" == "-" ]]
      then

         echo "Enter a valid path: "
         read -p '> ' workdir

         if [[ -z "${workdir}" ]]
         then

            echo 'No path provided'
            echo 'Falling back to current user home directory.'
         fi
      fi
   fi
}


ping_vm()
{
   retrieve_conn_params

   declare -i duration=0 count=1 max=10

   while sleep $duration
   do
      ping -n 1 -w 500 $vm_host > /dev/null

      [[ $? -eq 0 ]] && break

      if [[ $count -gt $max ]]
      then
         r_quit 1 "Failed to reach out to virtual machine [\"${vname}\"]'s network after ${count} attempt."
         break
      fi

      # increase by number a retry left
      duration+=$count

      # decrease number of retry
      count+=1
   done

   return 0
}

connect_to_vm()
{
   retrieve_conn_params

   # resolve workdir
   resolve_workdir

   echo -e "Trying connecting through ssh with:\nHost: ${vm_host}\nUser: ${vm_user}\nWorkdir: ${workdir:-"~"}\n..."

   # try reaching host
   ping_vm

   # retrieve vm shell
   get_attr 'shell' :vm_shell

   [[ -z "${vm_shell}" ]]  && r_quit 1 "vbox: connect: Failed to retrieve \"shell\" attribute from config current VM config file."

   declare ssh_command="cd ${workdir}; ${vm_shell} -l"

   # on-success connect to it
   ssh -ql $vm_user $vm_host -t $ssh_command 2> /dev/null

   [[ $? -ne 0 ]] && r_quit 1 "Connection to [\"${vname}\"] stopped abruptly."

   echo "Connection to [\"${vname}\"] closed."
}

declare -xf ping_vm
declare -xf connect_to_vm
declare -xf resolve_workdir
declare -xf retrieve_conn_params
