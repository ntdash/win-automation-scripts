#! /usr/bin/env bash

# attemp to retrieve vname

declare possible_vname=
read possible_vname <<< "$(echo $* | sed -r 's/.*:([^[:space:]]+)$/\1/')"

# retrieve subcommand_name and options

declare sed_pattern= sed_substitution= sed_result=

# default pattern not expecting a vname
sed_pattern='^([^[:space:]]+)(.*)'
sed_substitution='\1:\2'


# Note: sed return whole line if substitution fail therefore
# (suite)->  if vname still match list of passed argument then vname is not provided


# if retrieval succed then procced on retrieving subcommand-name and its options
if [[ "$*" != "${possible_vname}" ]]
then
   # pattern expecting a vname therefore limited at the end by the vname
   sed_pattern+="[[:space:]]:"${possible_vname}"\$"
   declare vname="${possible_vname}"
fi

sed_result=$(echo "$*" | sed -r  "s/${sed_pattern}/${sed_substitution}/")

declare IFS=':'
read subcommand_name options <<< $sed_result
declare IFS=


if [[ -z "${subcommand_name}" ]]
then
   r_quit 1 "${command_name}: ${subcommand_name} not found"
fi

# resolve [--] short hand
if [[ "${subcommand_name}" == "--" ]]
then
   subcommand_name="raw"
   options="-q -- ${options} ${vname}"
else
   # export vname
   declare -x vname
fi

# convert options into array
declare -a options="(${options})"


# form subcommand exec pathname
declare resolved_path="${subcommand_pathname}/${subcommand_name}"


declare subcommand_exec_filepath="${resolved_path}/.exec"

# throw error if no exec file is found
if [[ ! -f $subcommand_exec_filepath ]]
then
   r_quit 127 "${subcommand_name} exec file not found at: \"${subcommand_exec_filepath}\""
fi

# parse options if provided
if [[ ${#options} -gt 0 ]]
then
   options_parser ${options[@]}
fi

# export sub_command_path
declare -x cwd=$resolved_path

# execute subcommand
bash $subcommand_exec_filepath
