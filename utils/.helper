#! /usr/bin/env bash

# check if value is defined
is_defined()
{
	declare -p $1 &> /dev/null

	return $?
}

# check if value is array
is_array()
{
	declare patttern="^declare -[aA]"

	[[ "$(declare -p ${1} 2>/dev/null)" =~ $patttern ]]

	return $?
}

# check if variable is associative array
is_assoc_array()
{
	declare patttern="^declare -A"

	[[ "$(declare -p ${1} 2>/dev/null)" =~ $patttern ]]

	return $?
}

# $1 = value-param-name:binding-param-name
bind_param()
{
	if [[ $# -ne 2 ]] || [[ ! "$2" =~ ^:.+ ]]
	then
		return 1
	fi

	# value-param && binding-param
	declare b_param=${2:1} v_param=$1 v_type value result

	result=$(declare -p ${v_param} | sed -r "s/^declare -(.+) ${v_param}=(.+)$/\1:\2/" )

	declare IFS=':'
	read v_type value <<< $result
	IFS=

	if [[ "$v_type" == "-" ]]
	then
		v_type=""
		value=$( echo ${value} | sed 's/"//g' )
	fi

	declare -${v_type}g $b_param=$value
}

options_manager()
{
	declare -A collection="$serialized_parsed_options"

	# throw error if collection not defined
	# echo "Failed to retrieve parsed option's collection."
	! $(is_assoc_array collection) && return 1

	# declare local returners
	declare -i rcode=0
	declare rvalue=

	case $1 in

		"get")
			# $2 = key
			case $2 in

				"keys")
					rvalue=${!collection[@]}
				;;

				# error_message="Failed to retrieve value of option:\"${3}\"."
				"value")
					rvalue=${collection[$3]}

					[[ -z $rvalue ]] && rcode=2 || rcode=0
				;;

				# error_message="Failed to retrieve \"${2}\"."
				*)
					rcode=1
				;;
			esac
		;;

		"check")

			[[ " ${!collection[@]} " =~ $3 ]] && rcode=0 || rcode=1
		;;

		# echo "Failed to proccess \"${1}\""
		*)
			rcode=1
		;;
	esac


	if [[ $rcode -eq 0 ]]
	then
		echo $rvalue
	fi

	return $rcode
}


get_option_value()
{
	declare cval

	cval=$(options_manager get value $1)

	if [[ $? -ne 0 ]]
	then
		return 1
	fi

	bind_param cval $2 || echo $cval
}

option_key_exists()
{
	options_manager check $1 2>&1 /dev/null

	return $?
}

get_option_keys()
{
	declare -a cval

	cval=$(options_manager get keys)

	bind_param cval $1 || echo $cval
}

options_parser()
{
	declare -A collection

	# check options format
	if [[ ! "${1}" =~ ^-(-?)(.+) ]]
	then
		echo "Given options \"${@}\" does not satisfy the expected format"
		exit 1
	fi

	declare ckey entry collector

	declare argv="$@"

	declare IFS=
	while read entry
	do
		# shift the retrieved params
		shift

		if [[ -z $entry ]]
		then
			continue
		fi

		# collector announcer
		if [[ "${entry}" == "--" ]]
		then

			if [[ -n $ckey ]]
			then
				collector=true
				break
			else
				echo "Format invalid for: $argv"
				exit 1
			fi
		fi

		# check if current entry is a key
		if [[ "${entry}" =~ ^-(-?)(.+) ]]
		then

			# check if current key is a shorthand
			if [[ -z ${BASH_REMATCH[1]} ]]
			then

				declare list=`echo ${BASH_REMATCH[2]} | grep -o .`

				if [[ ${#list[@]} -gt 1 ]]
				then
					# loop current value
					declare k

					for k in ${list[@]}
					do
						# init
						collection[$k]=
					done

					# keep last value
					ckey="${k}"

					# skip
					continue;

				else
					# sole shorthand
					ckey="${list[0]}"
				fi

			else
				# long hand
				ckey="${BASH_REMATCH[2]}"
			fi

			# init
			collection[$ckey]=

			# skip
			continue;

		fi

		# add value to last registered key
		collection[$ckey]+=" ${entry} "

	done <<< "$(echo $@ | sed 's/\s/\n/g')"

	# concat all remaining args into current key [ckey] value
	if [[ "$collector" == "true" ]] && [[ $# -gt 0 ]]
	then
		collection[$ckey]+=" ${@} "
	fi

	# serialize associative array
	serialized_parsed_options="$(declare -p collection | sed -r 's/^declare -[aA] collection=(.*)$/\1/')"
}

# option helpers
declare -xf options_parser
declare -xf options_manager

declare -xf get_option_value
declare -xf get_option_keys
declare -xf option_key_exists

# definition helpers
declare -xf bind_param
declare -xf is_defined
declare -xf is_array
declare -xf is_assoc_array
